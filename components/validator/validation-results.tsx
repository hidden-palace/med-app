'use client';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Separator } from '@/components/ui/separator';
import type { ValidationHistory } from '@/lib/supabase';
import { 
  CheckCircle, 
  AlertTriangle, 
  XCircle, 
  Download, 
  FileText,
  MapPin,
  Clock
} from 'lucide-react';

interface ValidationResultsProps {
  result: ValidationHistory;
}

export function ValidationResults({ result }: ValidationResultsProps) {
  // Parse result details from JSONB
  const resultDetails = result.result_details || {};
  const lcdResults = result.lcd_results || [];
  const recommendations = result.recommendations || [];
  const overallScore = result.overall_score || 0;
  
  // Determine status based on overall score and result data
  const getValidationStatus = (): 'passed' | 'failed' | 'warning' => {
    if (result.status === 'failed') return 'failed';
    if (overallScore >= 90) return 'passed';
    if (overallScore >= 70) return 'warning';
    return 'failed';
  };
  
  const validationStatus = getValidationStatus();

  const getStatusIcon = () => {
    switch (validationStatus) {
      case 'passed':
        return <CheckCircle className="w-5 h-5 text-green-600" />;
      case 'warning':
        return <AlertTriangle className="w-5 h-5 text-orange-600" />;
      case 'failed':
        return <XCircle className="w-5 h-5 text-red-600" />;
      default:
        return null;
    }
  };

  const getStatusColor = () => {
    switch (validationStatus) {
      case 'passed':
        return 'text-green-600 bg-green-50 border-green-200';
      case 'warning':
        return 'text-orange-600 bg-orange-50 border-orange-200';
      case 'failed':
        return 'text-red-600 bg-red-50 border-red-200';
      default:
        return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const handleDownloadPDF = () => {
    // Generate PDF content with validation results
    const pdfContent = generatePDFContent(result);
    
    // Create and download the PDF
    const blob = new Blob([pdfContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `validation-report-${result.file_name.replace(/\.[^/.]+$/, '')}-${new Date(result.created_at).toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };
  
  const generatePDFContent = (result: ValidationHistory): string => {
    const date = new Date(result.created_at).toLocaleString();
    const overallScore = result.overall_score || 0;
    const lcdResults = result.lcd_results || [];
    const recommendations = result.recommendations || [];
    
    return `
CLINICAL NOTE VALIDATION REPORT
===============================

File: ${result.file_name}
State/Region: ${result.state} / ${result.region}
Validation Date: ${date}
Overall Score: ${overallScore}%
Status: ${result.status.toUpperCase()}

SUMMARY
-------
${result.result_summary || result.compliance_summary || 'Validation completed'}

${lcdResults.length > 0 ? `
LCD COMPLIANCE RESULTS
----------------------
${lcdResults.map((lcd: any) => `
LCD ${lcd.lcd || 'Unknown'}: ${(lcd.status || 'unknown').toUpperCase()}
Score: ${lcd.score || 'N/A'}%
Details: ${lcd.details || 'No details available'}
${lcd.missing_elements && lcd.missing_elements.length > 0 ? 
  `Missing Elements: ${lcd.missing_elements.join(', ')}` : ''}
`).join('\n')}
` : ''}

${recommendations.length > 0 ? `
RECOMMENDATIONS
---------------
${recommendations.map((rec: any, index: number) => `
${index + 1}. ${rec.suggestion || rec.description || rec}
   Category: ${rec.category || 'General'}
   Priority: ${rec.priority || 'Medium'}
`).join('\n')}
` : ''}

DETAILED ANALYSIS
-----------------
Document Structure: ${validationStatus !== 'failed' ? 'PASSED' : 'NEEDS ATTENTION'}
Clinical Content: ${validationStatus !== 'failed' ? 'PASSED' : 'NEEDS ATTENTION'}  
Compliance: ${validationStatus === 'passed' ? 'PASSED' : 'NEEDS ATTENTION'}

---
Report generated by MedLearn Platform
${new Date().toLocaleString()}
    `.trim();
  };

  // Create detailed results from LCD results and general result details
  const detailedResults = [];
  
  // Add LCD-specific results if available
  if (Array.isArray(lcdResults) && lcdResults.length > 0) {
    lcdResults.forEach((lcd: any) => {
      detailedResults.push({
        category: `LCD ${lcd.lcd || 'Unknown'}`,
        status: lcd.status === 'pass' ? 'passed' : (lcd.status === 'fail' ? 'failed' : 'warning'),
        checks: lcd.missing_elements ? 
          lcd.missing_elements.map((element: string) => ({
            name: element,
            passed: false
          })) : 
          [{ name: lcd.details || 'Compliance check', passed: lcd.status === 'pass' }]
      });
    });
  }
  
  // Add general categories if no LCD results
  if (detailedResults.length === 0) {
    detailedResults.push(
      {
        category: 'Document Structure',
        status: validationStatus,
        checks: [
          { name: 'SOAP format compliance', passed: validationStatus !== 'failed' },
          { name: 'Required sections present', passed: validationStatus !== 'failed' },
          { name: 'Proper headings used', passed: validationStatus !== 'failed' }
        ]
      },
      {
        category: 'Clinical Content',
        status: validationStatus,
        checks: [
          { name: 'Chief complaint documented', passed: validationStatus !== 'failed' },
          { name: 'Assessment and plan included', passed: validationStatus !== 'failed' },
          { name: 'Vital signs recorded', passed: validationStatus !== 'failed' }
        ]
      },
      {
        category: 'Compliance',
        status: validationStatus,
        checks: [
          { name: 'State-specific requirements', passed: validationStatus === 'passed' },
          { name: 'Privacy compliance (HIPAA)', passed: validationStatus !== 'failed' },
          { name: 'Professional standards met', passed: validationStatus === 'passed' }
        ]
      }
    );
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center space-x-2">
            {getStatusIcon()}
            <span>Validation Results</span>
            <Badge 
              variant="outline"
              className={getStatusColor()}
            >
              {validationStatus.toUpperCase()}
            </Badge>
          </CardTitle>
          
          <Button onClick={handleDownloadPDF} variant="outline">
            <Download className="w-4 h-4 mr-2" />
            Download PDF
          </Button>
        </div>
      </CardHeader>
      
      <CardContent className="space-y-6">
        {/* Summary Information */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-gray-50 rounded-lg">
          <div className="flex items-center space-x-2">
            <FileText className="w-4 h-4 text-gray-500" />
            <div>
              <div className="text-xs text-gray-500">File</div>
              <div className="font-medium">{result.file_name}</div>
            </div>
          </div>
          
          <div className="flex items-center space-x-2">
            <MapPin className="w-4 h-4 text-gray-500" />
            <div>
              <div className="text-xs text-gray-500">State / Region</div>
              <div className="font-medium">{result.state} / {result.region}</div>
            </div>
          </div>
          
          <div className="flex items-center space-x-2">
            <Clock className="w-4 h-4 text-gray-500" />
            <div>
              <div className="text-xs text-gray-500">Validated</div>
              <div className="font-medium">{new Date(result.created_at).toLocaleString()}</div>
            </div>
          </div>
        </div>

        {/* Overall Score */}
        {overallScore > 0 && (
          <div className="p-4 bg-blue-50 rounded-lg">
            <div className="flex items-center justify-between">
              <span className="font-medium text-blue-900">Overall Compliance Score</span>
              <span className="text-2xl font-bold text-blue-600">{overallScore}%</span>
            </div>
          </div>
        )}

        {/* Overall Summary */}
        <Alert className={getStatusColor()}>
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            <strong>{result.result_summary || result.compliance_summary || 'Validation completed'}</strong>
          </AlertDescription>
        </Alert>

        <Separator />

        {/* Detailed Results */}
        <div className="space-y-4">
          <h3 className="font-semibold text-lg">Detailed Analysis</h3>
          
          {detailedResults.map((category, index) => (
            <Card key={index} className="border-l-4 border-l-blue-500">
              <CardHeader className="pb-3">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-base">{category.category}</CardTitle>
                  <Badge 
                    variant="outline"
                    className={category.status === 'passed' ? 'text-green-600 bg-green-50' : 'text-orange-600 bg-orange-50'}
                  >
                    {category.status === 'passed' ? 'Passed' : 'Warning'}
                  </Badge>
                </div>
              </CardHeader>
              
              <CardContent className="pt-0">
                <div className="space-y-2">
                  {category.checks.map((check, checkIndex) => (
                    <div key={checkIndex} className="flex items-center justify-between text-sm">
                      <span className="text-gray-700">{check.name}</span>
                      <div className="flex items-center space-x-1">
                        {check.passed ? (
                          <CheckCircle className="w-4 h-4 text-green-600" />
                        ) : (
                          <AlertTriangle className="w-4 h-4 text-orange-600" />
                        )}
                        <span className={check.passed ? 'text-green-600' : 'text-orange-600'}>
                          {check.passed ? 'Pass' : 'Warning'}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Recommendations */}
        {(Array.isArray(recommendations) && recommendations.length > 0) && (
          <Card className="border-orange-200 bg-orange-50">
            <CardHeader>
              <CardTitle className="text-orange-800 flex items-center space-x-2">
                <AlertTriangle className="w-5 h-5" />
                <span>Recommendations</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2 text-sm text-orange-800">
                {recommendations.map((rec: any, index: number) => (
                  <li key={index}>• {rec.suggestion || rec.description || rec}</li>
                ))}
              </ul>
            </CardContent>
          </Card>
        )}
      </CardContent>
    </Card>
  );
}